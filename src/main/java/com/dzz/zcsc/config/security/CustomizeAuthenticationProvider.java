package com.dzz.zcsc.config.security;import com.google.common.base.Strings;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;/** * 自定义用户认证处理 * @author dzz * @since  2017年06月19 下午5:23 * @version  1.0.0 */@Componentpublic class CustomizeAuthenticationProvider implements AuthenticationProvider {    @Autowired    private CustomizeUserDetailsServiceImpl userDetailsService;    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        String userName = authentication.getName();        if (Strings.isNullOrEmpty(userName)) {            throw new UsernameNotFoundException("请填写用户名");        }        CustomizeUser user =  (CustomizeUser) userDetailsService.loadUserByUsername(userName);//        if(user == null){//            throw new UsernameNotFoundException("用户不存在");//        }////        if(user.getStatus()!=1){//            throw new UsernameNotFoundException("用户已被注销");//        }////        /*密码认证*///        String password = (String) authentication.getCredentials();//        ResponseBzn<Boolean> booleanResponseBzn = healthAdminUserService//                .checkPassword(password, user.getUserAccount(), user.getPassword());//        if (booleanResponseBzn.checkFail() || !booleanResponseBzn.getData()) {//            throw new BadCredentialsException("用户名或密码错误");//        }////        /*存入用户菜单信息*///        ResponseBzn<List<HealthPermitBO>> responseBzn = healthAdminUserService.selectAuthorizeByUserId(user.getUserId());//        if (responseBzn.checkFail() || null == responseBzn.getData()) {//            throw new BadCredentialsException("该用户未被授权，请联系管理员.");//        }//////        user.setAdminPermitList(responseBzn.getData());////       /* 组装权限URL放入权限列表*///        Set<GrantedAuthority> authorities = new HashSet<>();//        user.getAdminPermitList().stream().filter(adminMenuPermit ->//                !Strings.isNullOrEmpty(adminMenuPermit.getUrl())).collect(Collectors.toList())//                .forEach(adminMenuPermit -> {//                    authorities.add(new SimpleGrantedAuthority(adminMenuPermit.getUrl()));});//        /*角色权限信息*///        authorities.add(new SimpleGrantedAuthority("ROLE_USER"));//        return JWTUserDetailsFactory.create(userDetail,user);        return new UsernamePasswordAuthenticationToken(user, "", null);    }    @Override    public boolean supports(Class<?> aClass) {        return true;    }}